// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*) FROM products WHERE is_active = true
`

func (q *Queries) CountProducts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countProductsByCategory = `-- name: CountProductsByCategory :one
SELECT COUNT(*) FROM products WHERE category = $1 AND is_active = true
`

func (q *Queries) CountProductsByCategory(ctx context.Context, category *string) (int64, error) {
	row := q.db.QueryRow(ctx, countProductsByCategory, category)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price, stock_quantity, category)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, price, stock_quantity, category, is_active, created_at, updated_at
`

type CreateProductParams struct {
	Name          string         `db:"name"`
	Description   *string        `db:"description"`
	Price         pgtype.Numeric `db:"price"`
	StockQuantity int32          `db:"stock_quantity"`
	Category      *string        `db:"category"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (*Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.StockQuantity,
		arg.Category,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StockQuantity,
		&i.Category,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products
SET is_active = false, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, price, stock_quantity, category, is_active, created_at, updated_at
FROM products
WHERE id = $1 AND is_active = true
`

func (q *Queries) GetProduct(ctx context.Context, id pgtype.UUID) (*Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StockQuantity,
		&i.Category,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, price, stock_quantity, category, is_active, created_at, updated_at
FROM products
WHERE is_active = true
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]*Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.StockQuantity,
			&i.Category,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategory = `-- name: ListProductsByCategory :many
SELECT id, name, description, price, stock_quantity, category, is_active, created_at, updated_at
FROM products
WHERE category = $1 AND is_active = true
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProductsByCategoryParams struct {
	Category *string `db:"category"`
	Limit    int32   `db:"limit"`
	Offset   int32   `db:"offset"`
}

func (q *Queries) ListProductsByCategory(ctx context.Context, arg ListProductsByCategoryParams) ([]*Product, error) {
	rows, err := q.db.Query(ctx, listProductsByCategory, arg.Category, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.StockQuantity,
			&i.Category,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProducts = `-- name: SearchProducts :many
SELECT id, name, description, price, stock_quantity, category, is_active, created_at, updated_at
FROM products
WHERE (name ILIKE '%' || $1 || '%' OR description ILIKE '%' || $1 || '%')
  AND is_active = true
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type SearchProductsParams struct {
	Column1 *string `db:"column_1"`
	Limit   int32   `db:"limit"`
	Offset  int32   `db:"offset"`
}

func (q *Queries) SearchProducts(ctx context.Context, arg SearchProductsParams) ([]*Product, error) {
	rows, err := q.db.Query(ctx, searchProducts, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.StockQuantity,
			&i.Category,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2, description = $3, price = $4, stock_quantity = $5, category = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND is_active = true
RETURNING id, name, description, price, stock_quantity, category, is_active, created_at, updated_at
`

type UpdateProductParams struct {
	ID            pgtype.UUID    `db:"id"`
	Name          string         `db:"name"`
	Description   *string        `db:"description"`
	Price         pgtype.Numeric `db:"price"`
	StockQuantity int32          `db:"stock_quantity"`
	Category      *string        `db:"category"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (*Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.StockQuantity,
		arg.Category,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StockQuantity,
		&i.Category,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateProductStock = `-- name: UpdateProductStock :one
UPDATE products
SET stock_quantity = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND is_active = true
RETURNING id, name, description, price, stock_quantity, category, is_active, created_at, updated_at
`

type UpdateProductStockParams struct {
	ID            pgtype.UUID `db:"id"`
	StockQuantity int32       `db:"stock_quantity"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) (*Product, error) {
	row := q.db.QueryRow(ctx, updateProductStock, arg.ID, arg.StockQuantity)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StockQuantity,
		&i.Category,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
