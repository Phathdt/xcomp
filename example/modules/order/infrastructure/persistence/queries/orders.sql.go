// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countOrders = `-- name: CountOrders :one
SELECT COUNT(*) FROM orders
`

func (q *Queries) CountOrders(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countOrders)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countOrdersByCustomerID = `-- name: CountOrdersByCustomerID :one
SELECT COUNT(*) FROM orders WHERE customer_id = $1
`

func (q *Queries) CountOrdersByCustomerID(ctx context.Context, customerID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countOrdersByCustomerID, customerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    id, customer_id, status, total_amount, shipping_cost, tax_amount,
    discount_amount, notes, shipping_address, billing_address, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, customer_id, status, total_amount, shipping_cost, tax_amount, discount_amount, notes, shipping_address, billing_address, created_at, updated_at
`

type CreateOrderParams struct {
	ID              pgtype.UUID        `json:"id"`
	CustomerID      pgtype.UUID        `json:"customer_id"`
	Status          string             `json:"status"`
	TotalAmount     pgtype.Numeric     `json:"total_amount"`
	ShippingCost    pgtype.Numeric     `json:"shipping_cost"`
	TaxAmount       pgtype.Numeric     `json:"tax_amount"`
	DiscountAmount  pgtype.Numeric     `json:"discount_amount"`
	Notes           pgtype.Text        `json:"notes"`
	ShippingAddress pgtype.Text        `json:"shipping_address"`
	BillingAddress  pgtype.Text        `json:"billing_address"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
}

// Order queries
func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.CustomerID,
		arg.Status,
		arg.TotalAmount,
		arg.ShippingCost,
		arg.TaxAmount,
		arg.DiscountAmount,
		arg.Notes,
		arg.ShippingAddress,
		arg.BillingAddress,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.TotalAmount,
		&i.ShippingCost,
		&i.TaxAmount,
		&i.DiscountAmount,
		&i.Notes,
		&i.ShippingAddress,
		&i.BillingAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
    id, order_id, product_id, product_name, quantity, unit_price, total_price
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, order_id, product_id, product_name, quantity, unit_price, total_price
`

type CreateOrderItemParams struct {
	ID          pgtype.UUID    `json:"id"`
	OrderID     pgtype.UUID    `json:"order_id"`
	ProductID   pgtype.UUID    `json:"product_id"`
	ProductName string         `json:"product_name"`
	Quantity    int32          `json:"quantity"`
	UnitPrice   pgtype.Numeric `json:"unit_price"`
	TotalPrice  pgtype.Numeric `json:"total_price"`
}

// Order Item queries
func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.ProductName,
		arg.Quantity,
		arg.UnitPrice,
		arg.TotalPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.ProductName,
		&i.Quantity,
		&i.UnitPrice,
		&i.TotalPrice,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrderItem, id)
	return err
}

const deleteOrderItemsByOrderID = `-- name: DeleteOrderItemsByOrderID :exec
DELETE FROM order_items WHERE order_id = $1
`

func (q *Queries) DeleteOrderItemsByOrderID(ctx context.Context, orderID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrderItemsByOrderID, orderID)
	return err
}

const getAllOrders = `-- name: GetAllOrders :many
SELECT id, customer_id, status, total_amount, shipping_cost, tax_amount, discount_amount, notes, shipping_address, billing_address, created_at, updated_at FROM orders
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllOrders(ctx context.Context, arg GetAllOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getAllOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.TotalAmount,
			&i.ShippingCost,
			&i.TaxAmount,
			&i.DiscountAmount,
			&i.Notes,
			&i.ShippingAddress,
			&i.BillingAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, customer_id, status, total_amount, shipping_cost, tax_amount, discount_amount, notes, shipping_address, billing_address, created_at, updated_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id pgtype.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.TotalAmount,
		&i.ShippingCost,
		&i.TaxAmount,
		&i.DiscountAmount,
		&i.Notes,
		&i.ShippingAddress,
		&i.BillingAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItemByID = `-- name: GetOrderItemByID :one
SELECT id, order_id, product_id, product_name, quantity, unit_price, total_price FROM order_items WHERE id = $1
`

func (q *Queries) GetOrderItemByID(ctx context.Context, id pgtype.UUID) (OrderItem, error) {
	row := q.db.QueryRow(ctx, getOrderItemByID, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.ProductName,
		&i.Quantity,
		&i.UnitPrice,
		&i.TotalPrice,
	)
	return i, err
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
SELECT id, order_id, product_id, product_name, quantity, unit_price, total_price FROM order_items WHERE order_id = $1 ORDER BY id
`

func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, orderID pgtype.UUID) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, getOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.ProductName,
			&i.Quantity,
			&i.UnitPrice,
			&i.TotalPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByCustomerID = `-- name: GetOrdersByCustomerID :many
SELECT id, customer_id, status, total_amount, shipping_cost, tax_amount, discount_amount, notes, shipping_address, billing_address, created_at, updated_at FROM orders
WHERE customer_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersByCustomerIDParams struct {
	CustomerID pgtype.UUID `json:"customer_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

func (q *Queries) GetOrdersByCustomerID(ctx context.Context, arg GetOrdersByCustomerIDParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByCustomerID, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.TotalAmount,
			&i.ShippingCost,
			&i.TaxAmount,
			&i.DiscountAmount,
			&i.Notes,
			&i.ShippingAddress,
			&i.BillingAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByStatus = `-- name: GetOrdersByStatus :many
SELECT id, customer_id, status, total_amount, shipping_cost, tax_amount, discount_amount, notes, shipping_address, billing_address, created_at, updated_at FROM orders
WHERE status = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersByStatusParams struct {
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetOrdersByStatus(ctx context.Context, arg GetOrdersByStatusParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.TotalAmount,
			&i.ShippingCost,
			&i.TaxAmount,
			&i.DiscountAmount,
			&i.Notes,
			&i.ShippingAddress,
			&i.BillingAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET status = $2, total_amount = $3, shipping_cost = $4, tax_amount = $5,
    discount_amount = $6, notes = $7, shipping_address = $8, billing_address = $9,
    updated_at = $10
WHERE id = $1
RETURNING id, customer_id, status, total_amount, shipping_cost, tax_amount, discount_amount, notes, shipping_address, billing_address, created_at, updated_at
`

type UpdateOrderParams struct {
	ID              pgtype.UUID        `json:"id"`
	Status          string             `json:"status"`
	TotalAmount     pgtype.Numeric     `json:"total_amount"`
	ShippingCost    pgtype.Numeric     `json:"shipping_cost"`
	TaxAmount       pgtype.Numeric     `json:"tax_amount"`
	DiscountAmount  pgtype.Numeric     `json:"discount_amount"`
	Notes           pgtype.Text        `json:"notes"`
	ShippingAddress pgtype.Text        `json:"shipping_address"`
	BillingAddress  pgtype.Text        `json:"billing_address"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ID,
		arg.Status,
		arg.TotalAmount,
		arg.ShippingCost,
		arg.TaxAmount,
		arg.DiscountAmount,
		arg.Notes,
		arg.ShippingAddress,
		arg.BillingAddress,
		arg.UpdatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.TotalAmount,
		&i.ShippingCost,
		&i.TaxAmount,
		&i.DiscountAmount,
		&i.Notes,
		&i.ShippingAddress,
		&i.BillingAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE order_items
SET quantity = $2, unit_price = $3, total_price = $4
WHERE id = $1
RETURNING id, order_id, product_id, product_name, quantity, unit_price, total_price
`

type UpdateOrderItemParams struct {
	ID         pgtype.UUID    `json:"id"`
	Quantity   int32          `json:"quantity"`
	UnitPrice  pgtype.Numeric `json:"unit_price"`
	TotalPrice pgtype.Numeric `json:"total_price"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, updateOrderItem,
		arg.ID,
		arg.Quantity,
		arg.UnitPrice,
		arg.TotalPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.ProductName,
		&i.Quantity,
		&i.UnitPrice,
		&i.TotalPrice,
	)
	return i, err
}
